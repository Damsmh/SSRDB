@page "/employees"
@inherits OwningComponentBase<IEmployeeRepository>
@rendermode InteractiveServer

<PageTitle>Employees</PageTitle>

<div class="d-flex justify-content-between pb-5">
    <h1>Приёмы</h1>
    <button type="button" class="btn btn-dark"
    data-bs-toggle="modal"
    data-bs-target="#employeeModal">
        <i class="bi bi-plus-lg"></i>
        Добавить
    </button>
    <div class="modal fade" id="employeeModal" tabindex="-1" aria-labelledby="employeeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="employeeModalLabel">Сведения о Приёме</h5>
                </div>
                <EditForm Model="ModelEmployee" OnValidSubmit="InsertObjAsync" FormName="EmployeeForm">
                    <div class="modal-body">
                        <table class="table">
                            <tr>
                                <td>ФИО</td>
                                <td><InputText @bind-Value="ModelEmployee!.FullName" /></td>
                            </tr>
                            <tr>
                                <td>Специализация</td>
                                <td><InputText @bind-Value="ModelEmployee!.Specialization" /></td>
                            </tr>
                            <tr>
                                <td>Номер лицензии</td>
                                <td><InputText @bind-Value="ModelEmployee!.LicenseNumber" /></td>
                            </tr>
                            <tr>
                                <td>Телефон</td>
                                <td><InputText @bind-Value="ModelEmployee!.Phone" /></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn border-black" data-bs-dismiss="modal" @onclick="Discard">Закрыть</button>
                        <button type="submit" class="btn btn-dark" data-bs-dismiss="modal">Сохранить</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table border">
        <thead>
            <tr>
                @foreach (var head in headers)
                {
                    <th>@head</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var employee in employees)
            {
                <tr @key="employee.EmployeeId">
                    <td class="align-middle">@employee.EmployeeId</td>
                    <td class="align-middle">@employee.FullName</td>
                    <td class="align-middle">@employee.Specialization</td>
                    <td class="align-middle">@employee.LicenseNumber</td>
                    <td class="align-middle">@employee.Phone</td>
                    <td>
                        <button type="button"
                        @onclick="@(async () => await DetailsObjAsync(employee.EmployeeId))"
                        class="btn"
                        data-bs-toggle="modal"
                        data-bs-target="#employeeModal">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button type="button"
                        @onclick="@(async () => await DeleteObjAsync(employee.EmployeeId))"
                                class="btn trash">
                            <i class="bi bi-trash text-danger"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Entities.Employee>? employees;
    private List<string> headers = ["ID", "ФИО", "Специализация", "Номер лицензии", "Телефон", "Действия"];
    [SupplyParameterFromForm(FormName = "EmployeeForm")]
    public Entities.Employee? ModelEmployee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ModelEmployee ??= new();
        ModelEmployee!.EmployeeId = 0;
        employees = await Service.GetAllAsync();
    }

    private void Discard()
    {
        ModelEmployee = new();
    }
    private async Task InsertObjAsync()
    {
        if (ModelEmployee!.EmployeeId == 0) { 
            if (!IsAnyNullOrEmpty(ModelEmployee))
            {
                await Service.AddAsync(ModelEmployee);
            }
        }
        else { await Service.UpdateAsync(ModelEmployee); }
        employees = await Service.GetAllAsync();
        Discard();
    }

    private async Task DetailsObjAsync(int Id)
    {
        ModelEmployee = await Service.GetByIdAsync(Id);
    }

    private async Task DeleteObjAsync(int Id)
    {
        await Service.DeleteAsync(Id);
        employees = await Service.GetAllAsync();
    }
}