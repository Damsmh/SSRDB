@page "/services"
@inherits OwningComponentBase<IServiceRepository>
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Services</PageTitle>

<div class="d-flex justify-content-between pb-5">
    <h1>Услуги</h1>
    <button type="button" class="btn btn-dark"
    data-bs-toggle="modal"
    data-bs-target="#serviceModal">
        <i class="bi bi-plus-lg"></i>
        Добавить
    </button>
    <div class="modal fade" id="serviceModal" tabindex="-1" aria-labelledby="serviceModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="serviceModalLabel">Сведения об Услуге</h5>
                </div>
                <EditForm Model="ModelService" OnValidSubmit="InsertObjAsync" FormName="ServiceForm">
                    <div class="modal-body">
                        <table class="table">
                            <tr>
                                <td>Название</td>
                                <td><InputText class="form-control" @bind-Value="ModelService!.Name" /></td>
                            </tr>
                            <tr>
                                <td>Стоимость</td>
                                <td><InputNumber class="form-control" @bind-Value="ModelService!.Price" /></td>
                            </tr>
                            <tr>
                                <td>Длительность</td>
                                <td><InputNumber class="form-control" @bind-Value="ModelService!.DurationMinutes" /></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn border-black" data-bs-dismiss="modal" @onclick="Discard">Закрыть</button>
                        <button type="submit" class="btn btn-dark" data-bs-dismiss="modal">Сохранить</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@if (pagedservices == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex p-2">
        <div>
            <label for="Names" class="form-label">Поиск по названию</label>
            <input class="form-control" id="Names" placeholder="Введите название..." @bind="Name" @bind:event="oninput" @bind:after="SearchByName">
        </div>
    </div>

    <table class="table border">
        <thead>
            <tr>
                @foreach (var head in headers)
                {
                    <th>
                        <button class="btn" @onclick="@(async () => await SortByColumnHead(head))">
                            @head
                            @if (currentSortColumn == head)
                            {
                                <span>@(sorted ? "↑" : "↓")</span>
                            }
                        </button>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var service in pagedservices)
            {
                <tr @key="service.ServiceId">
                    <td class="align-middle">@service.ServiceId</td>
                    <td class="align-middle">@service.Name</td>
                    <td class="align-middle">@service.Price<span> ₽</span></td>
                    <td class="align-middle">@service.DurationMinutes<span> мин</span></td>
                    <td>
                        <button type="button"
                        @onclick="@(async () => await DetailsObjAsync(service.ServiceId))"
                        class="btn"
                        data-bs-toggle="modal"
                        data-bs-target="#serviceModal">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button type="button"
                        @onclick="@(async () => await DeleteObjAsync(service.ServiceId))"
                        class="btn trash">
                            <i class="bi bi-trash text-danger"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Предыдущая</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                var page = i;
                <li class="page-item @(currentPage == page ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(page)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Следующая</button>
            </li>
        </ul>
    </nav>
}

@code {
    private IEnumerable<Entities.Service>? services;
    private IEnumerable<Service>? pagedservices;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private List<string> headers = ["ID", "Название", "Стоимость", "Длительность", "Действия"];
    [SupplyParameterFromForm(FormName = "ServiceForm")]
    public Entities.Service? ModelService { get; set; }
    private bool sorted;
    private string currentSortColumn;

    private string Name = "";

    protected override async Task OnInitializedAsync()
    {
        ModelService ??= new();
        ModelService!.ServiceId = 0;
        services = await Service.GetAllAsync();
        UpdatePagedData();
    }

    private void Discard()
    {
        ModelService = new();
    }
    private async Task InsertObjAsync()
    {
        if (!IsAnyNullOrEmpty(ModelService))
        {
            if (ModelService!.ServiceId == 0)
            {
                await Service.AddAsync(ModelService);
            }
            else { await Service.UpdateAsync(ModelService); }
            services = await Service.GetAllAsync();
            UpdatePagedData();
        }
        Discard();
    }

    private async Task DetailsObjAsync(int Id)
    {
        ModelService = await Service.GetByIdAsync(Id);
    }

    private async Task DeleteObjAsync(int Id)
    {
        await Service.DeleteAsync(Id);
        services = await Service.GetAllAsync();
        UpdatePagedData();
    }

    private void UpdatePagedData()
    {
        totalPages = (int)Math.Ceiling((double)services.Count() / pageSize);
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        int startIndex = (currentPage - 1) * pageSize;
        pagedservices = services.Skip(startIndex).Take(pageSize);
    }

    private void ChangePage(int newPage)
    {
        currentPage = newPage;
        UpdatePagedData();
    }

    private async Task SortByColumnHead(string column)
    {
        currentSortColumn = column;
        if (!sorted)
        {
            var sortedList = await Service.SortByColumn(column, "ASC");
            if (sortedList != null)
            {
                services = sortedList;
                sorted = !sorted;
                UpdatePagedData();
            }
        }
        else
        {
            var sortedList = await Service.SortByColumn(column, "DESC");
            if (sortedList != null)
            {
                services = sortedList;
                sorted = !sorted;
                UpdatePagedData();
            }
        }
    }
    private async Task SearchByName()
    {
        services = services
            .Where(p => p.Name.Contains(Name));
        UpdatePagedData();
    }

}