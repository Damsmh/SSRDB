@page "/prescriptions"
@inherits OwningComponentBase<IPrescriptionRepository>
@inject IDiagnosisRepository DiagnosisService
@inject IMedicationRepository MedicationService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Prescriptions</PageTitle>

<div class="d-flex justify-content-between pb-5">
    <h1>Рецепты</h1>
    <button type="button" class="btn btn-dark"
    data-bs-toggle="modal"
    data-bs-target="#prescriptionModal">
        <i class="bi bi-plus-lg"></i>
        Добавить
    </button>
    <div class="modal fade" id="prescriptionModal" tabindex="-1" aria-labelledby="prescriptionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="prescriptionModalLabel">Сведения о Рецепте</h5>
                </div>
                <EditForm Model="ModelPrescription" OnValidSubmit="InsertObjAsync" FormName="PrescriptionForm">
                    <div class="modal-body">
                        <table class="table">
                            <tr>
                                <td>Код диагноза(МКБ-10)</td>
                                <td>
                                    <input type="text" class="form-control" list="Diagnoses" @bind="DiagnosisName" @bind:event="oninput" @bind:after="SearchDiagnosis" />
                                    <datalist class="col-4" id="Diagnoses">
                                        @if (diagnoses != null)
                                        {
                                            @foreach (var diagnosis in diagnoses)
                                            {
                                                <option value="@diagnosis.DiagnosisCode"></option>
                                            }
                                        }
                                    </datalist>
                                </td>
                            </tr>
                            <tr>
                                <td>Медикамент</td>
                                <td>
                                    <input type="text" class="form-control" list="Medications" @bind="MedicationName" @bind:event="oninput" @bind:after="SearchMedication"/>
                                    <datalist class="col-4" id="Medications">
                                        @if (medications != null)
                                        {
                                            @foreach (var medication in medications)
                                            {
                                                <option value="@medication.Name"></option>
                                            }
                                        }
                                    </datalist>
                                </td>
                            </tr>
                            <tr>
                                <td>Доза</td>
                                <td><InputText class="form-control" @bind-Value="ModelPrescription!.Dosage" /></td>
                            </tr>
                            <tr>
                                <td>Период применения (Д)</td>
                                <td><InputNumber class="form-control" @bind-Value="ModelPrescription!.DurationDays" /></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn border-black" data-bs-dismiss="modal" @onclick="Discard">Закрыть</button>
                        <button type="submit" class="btn btn-dark" data-bs-dismiss="modal">Сохранить</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@if (prescriptions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="d-flex p-2">
        <label for="Diagnosis" class="form-label">Поиск по коду диагноза</label>
        <input class="form-control" id="Diagnosis" placeholder="Введите код диагноза..." @bind="DiagnosisName" @bind:event="oninput" @bind:after="SearchByDiagnosis">
        <label for="Medication" class="form-label">Поиск по медикаменту</label>
        <input class="form-control" id="Medication" placeholder="Введите медикамент..." @bind="MedicationName" @bind:event="oninput" @bind:after="SearchByMedication">
    </div>
    

    <table class="table border">
        <thead>
            <tr>
                @foreach (var head in headers)
                {
                    <th>
                        <button class="btn" @onclick="@(async () => await SortByColumnHead(head))">
                            @head
                            @if (currentSortColumn == head)
                            {
                                <span>@(sorted ? "↑" : "↓")</span>
                            }
                        </button>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var prescription in pagedprescriptions)
            {
                <tr @key="prescription.PrescriptionId">
                    <td class="align-middle">@prescription.PrescriptionId</td>
                    <td class="align-middle">@prescription.Diagnosis.DiagnosisCode</td>
                    <td class="align-middle">@prescription.Medication.Name</td>
                    <td class="align-middle">@prescription.Dosage</td>
                    <td class="align-middle">@prescription.DurationDays<span> Д</span></td>
                    <td>
                        <button type="button"
                        @onclick="@(async () => await DetailsObjAsync(prescription.PrescriptionId))"
                        class="btn"
                        data-bs-toggle="modal"
                        data-bs-target="#prescriptionModal">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button type="button"
                        @onclick="@(async () => await DeleteObjAsync(prescription.PrescriptionId))"
                        class="btn trash">
                            <i class="bi bi-trash text-danger"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Предыдущая</button>
            </li>
            @for (int i = 1; i <= totalPages; i++)
            {
                var page = i;
                <li class="page-item @(currentPage == page ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(page)">@i</button>
                </li>
            }
            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Следующая</button>
            </li>
        </ul>
    </nav>
}

@code {
    private IEnumerable<Entities.Prescription>? prescriptions;
    private IEnumerable<Prescription>? pagedprescriptions;
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages;
    private List<string> headers = ["ID", "Код диагноза(МКБ-10)", "Медикамент", "Доза", "Период применения", "Действия"];
    [SupplyParameterFromForm(FormName = "PrescriptionForm")]
    public Entities.Prescription? ModelPrescription { get; set; }
    private IEnumerable<Diagnosis>? diagnoses;
    private IEnumerable<Diagnosis>? SearchDiagnoses;
    private IEnumerable<Medication>? medications;
    private IEnumerable<Medication>? SearchMedications;
    private bool sorted;
    private string currentSortColumn;

    private string DiagnosisName = "";
    private string MedicationName = "";

    protected override async Task OnInitializedAsync()
    {
        ModelPrescription ??= new();
        ModelPrescription!.PrescriptionId = 0;
        diagnoses = await DiagnosisService.GetAllAsync();
        medications = await MedicationService.GetAllAsync();
        prescriptions = await Service.GetAllAsync();
        UpdatePagedData();
    }

    private void Discard()
    {
        ModelPrescription = new();
        DiagnosisName = "";
        MedicationName = "";
    }
    private async Task InsertObjAsync()
    {
        if (!IsAnyNullOrEmpty(ModelPrescription)) {
            if (ModelPrescription!.PrescriptionId == 0)
            {
                await Service.AddAsync(ModelPrescription);
            }
            else { await Service.UpdateAsync(ModelPrescription); }
            prescriptions = await Service.GetAllAsync();
            UpdatePagedData();
        }
        Discard();
    }

    private async Task DetailsObjAsync(int Id)
    {
        ModelPrescription = await Service.GetByIdAsync(Id);
        MedicationName = ModelPrescription.Medication.Name;
        DiagnosisName = ModelPrescription.Diagnosis.DiagnosisCode;
    }

    private async Task DeleteObjAsync(int Id)
    {
        await Service.DeleteAsync(Id);
        prescriptions = await Service.GetAllAsync();
        UpdatePagedData();
    }

    private async Task SearchDiagnosis()
    {
        var diagnosis = diagnoses.Where(e => e.DiagnosisCode == DiagnosisName).FirstOrDefault();
        if (diagnosis != null) { ModelPrescription.DiagnosisId = diagnosis.DiagnosisId; }

    }

    private async Task SearchMedication()
    {
        var medication = medications.Where(e => e.Name == MedicationName).FirstOrDefault();
        if (medication != null) { ModelPrescription.MedicationId = medication.MedicationId; }
    }

    private void UpdatePagedData()
    {
        totalPages = (int)Math.Ceiling((double)prescriptions.Count() / pageSize);
        if (currentPage < 1) currentPage = 1;
        if (currentPage > totalPages) currentPage = totalPages;

        int startIndex = (currentPage - 1) * pageSize;
        pagedprescriptions = prescriptions.Skip(startIndex).Take(pageSize);
    }

    private void ChangePage(int newPage)
    {
        currentPage = newPage;
        UpdatePagedData();
    }

    private async Task SortByColumnHead(string column)
    {
        currentSortColumn = column;
        if (!sorted)
        {
            var sortedList = await Service.SortByColumn(column, "ASC");
            if (sortedList != null)
            {
                prescriptions = sortedList;
                sorted = !sorted;
                UpdatePagedData();
            }
        }
        else
        {
            var sortedList = await Service.SortByColumn(column, "DESC");
            if (sortedList != null)
            {
                prescriptions = sortedList;
                sorted = !sorted;
                UpdatePagedData();
            }
        }
    }

    private async Task SearchByDiagnosis()
    {
        prescriptions = prescriptions
            .Where(p => p.Diagnosis.DiagnosisCode.Contains(DiagnosisName));
        UpdatePagedData();
    }

    private async Task SearchByMedication()
    {
        prescriptions = prescriptions
            .Where(p => p.Medication.Name.Contains(MedicationName));
        UpdatePagedData();
    }
}